import * as fs from 'node:fs/promises'
import * as path from 'node:path'

function capitalizeFirstLetter([first = '', ...rest], locale) {
  return [first.toLocaleUpperCase(locale), ...rest].join('');
}

function kebabToPascal(name, locale) {
  return name.split('-').map(part => capitalizeFirstLetter(part, locale)).join('')
}


const componentTemplate = (name, svg) => `
  // this file was generated by build/icons.js
  // do not modify!
  import type { Component, JSX } from "solid-js"

  export const ${name}: Component<JSX.SvgSVGAttributes<SVGSVGElement>> = (attrs = {}) => {
    return (${svg.replace('<svg', '<svg {...attrs}')})
  }
`


async function generateIconComponent(iconDir, outDir) {
  const names = []

  for (const filename of await fs.readdir(iconDir)) {
    const filepath = path.join(iconDir, filename)
    const stat = await fs.stat(filepath)
    const name = path.parse(filename).name

    if (stat.isFile() && !filename.startsWith('.')) {
      const svg = (await fs.readFile(filepath)).toString('utf-8')
      const component = componentTemplate(kebabToPascal(name), svg)
      await fs.writeFile(path.join(outDir, kebabToPascal(name) + '.tsx'), component)
      names.push(kebabToPascal(name))
    }
  }

  return names
}

const iconDist = new URL('../node_modules/@useblu/ocean-icons/dist', import.meta.url).pathname
const solidIcons = path.join(iconDist, 'solid')
const outlineIcons = path.join(iconDist, 'outline')
const outDir = new URL('../src/icons', import.meta.url).pathname

const solidNames = await generateIconComponent(solidIcons, path.join(outDir, 'solid'))
const outlineNames = await generateIconComponent(outlineIcons, path.join(outDir, 'outline'))

fs.writeFile(
  path.join(outDir, 'solid', 'index.ts'),
  `
// this file was generated by build/icons.js
// do not modify!
${solidNames.map(name => `export { ${name} } from './${name}.tsx'`).join('\n')}
  `.trim()
)

fs.writeFile(
  path.join(outDir, 'outline', 'index.ts'),
  `
// this file was generated by build/icons.js
// do not modify!
${outlineNames.map(name => `export { ${name} } from './${name}.tsx'`).join('\n')}
  `.trim()
)

fs.writeFile(
  path.join(outDir, 'index.ts'),
  `
// this file was generated by build/icons.js
// do not modify!  
export * as Solid from './solid/index.ts'
export * as Outline from './outline/index.ts'
  `.trim()
)